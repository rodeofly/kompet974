// Generated by CoffeeScript 1.9.3
(function() {
  var CATEGORIES, CLASSES, Categorie, DATA, DATA_TEMP, Descripteur, DnDFileController, HEADERS, ID, SELECTED_DOMS, Signifiant, bigTable, copyToClipboard, go_csv_data, toggleEval,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ID = 1;

  HEADERS = ['ID', 'Classe', 'Nom', 'Prénom', 'D1-1.1', 'D1-1.2', 'D1-1.3', 'D1-1.4', 'D1-1.5', 'D1-3.1', 'D1-3.2', 'D1-3.3', 'D1-3.4', 'D1-3.5', 'D1-3.6', 'D1-3.7', 'D2.1', 'D2.2', 'D2.3', 'D2.4', 'D3.1', 'D3.2', 'D3.3', 'D3.4', 'D4.1', 'D4.2', 'D5.1', 'Co.1', 'Co.2', 'Co.3', 'Co.4', 'Co.5', 'Co.6'];

  SELECTED_DOMS = [];

  CATEGORIES = void 0;

  CLASSES = [];

  DATA = [HEADERS];

  DATA_TEMP = [];

  DnDFileController = function(selector, onDropCallback) {
    var el_;
    el_ = document.querySelector(selector);
    this.dragenter = function(e) {
      e.stopPropagation();
      e.preventDefault();
      el_.classList.add('dropping');
      return $("#upload").addClass("slim");
    };
    this.dragover = function(e) {
      e.stopPropagation();
      return e.preventDefault();
    };
    this.dragleave = function(e) {
      e.stopPropagation();
      e.preventDefault();
      $("#upload").removeClass("slim");
      return el_.classList.remove('dropping');
    };
    this.drop = function(e) {
      e.stopPropagation();
      e.preventDefault();
      el_.classList.remove('dropping');
      onDropCallback(e.dataTransfer.files, e);
      $("#upload").removeClass("slim");
      return $("#upload").hide();
    };
    el_.addEventListener('dragenter', this.dragenter, false);
    el_.addEventListener('dragover', this.dragover, false);
    el_.addEventListener('dragleave', this.dragleave, false);
    return el_.addEventListener('drop', this.drop, false);
  };

  bigTable = function(data) {
    var color, defaults, domain, head, i, j, options, row, rows, table, tfoot, thead, val;
    options = {
      thead: true,
      attrs: {
        "class": 'table'
      }
    };
    table = $('<table id="tableau"/>');
    rows = [];
    defaults = {
      th: true,
      thead: false,
      tfoot: false,
      attrs: {}
    };
    options = $.extend(defaults, options);
    table.attr(options.attrs);
    i = 0;
    while (i < data.length) {
      row = $("<tr data-id='" + data[i][0] + "'/>");
      j = 0;
      while (j < data[i].length) {
        if (i === 0 && options.th) {
          head = data[i][j];
          console.log(head.slice(0, 2));
          switch (head.slice(0, 2)) {
            case "D1":
              domain = "D1";
              break;
            case "Co":
              domain = "Co";
              break;
            default:
              domain = head.slice(0, 2);
          }
          if (j === 0) {
            head = "<input type='checkbox' data-row='" + i + "'>" + head;
          }
          if (j > 3) {
            if (domain === "Co") {
              head = "<img  class='thdomain' src='img/" + data[i][j] + ".svg' data-domain='" + domain + "'><br>" + data[i][j];
            } else {
              head = "<img  class='thdomain' src='img/" + domain + ".svg' data-domain='" + domain + "'><br>" + data[i][j];
            }
            row.append($("<th data-row='" + i + "' data-col='" + j + "' data-id='" + data[i][j] + "' data-dom='" + data[0][j] + "'></th>").html(head));
          } else {
            row.append($("<th data-row='" + i + "' data-col='" + j + "' data-id='" + data[i][j] + "' data-dom='" + data[0][j] + "'></th>").html(head));
          }
        } else {
          if (j === 0) {
            val = "<input type='checkbox' data-id='" + data[i][j] + "''><button class='eleve_id' data-id='" + data[i][j] + "''>" + data[i][j] + "</button>";
          } else {
            val = "" + data[i][j];
            color = {
              "0": "white",
              "10": "red",
              "25": "yellow",
              "40": "lightGreen",
              "50": "green"
            }[val];
          }
          if (color === void 0) {
            color = "white";
          }
          row.append($("<td data-color='" + color + "' data-row='" + i + "' data-col='" + j + "' data-id='" + data[i][0] + "' data-dom='" + data[0][j] + "'></td>").html(val));
        }
        j = j + 1;
      }
      rows.push(row);
      i = i + 1;
    }
    if (options.thead) {
      thead = rows.shift();
      thead = $('<thead />').append(thead);
      table.append(thead);
    }
    if (options.tfoot) {
      tfoot = rows.pop();
    }
    i = 0;
    while (i < rows.length) {
      table.append(rows[i]);
      i = i + 1;
    }
    if (options.tfoot) {
      tfoot = $('<tfoot />').append(tfoot);
      table.append(tfoot);
    }
    return $("#scoreTable").empty().append(table);
  };

  toggleEval = function(dom) {
    var $cell, $cells, col, color, id, ref, ref1, ref2, ref3, ref4, ref5, row, score;
    switch ($(".signifiant[data-item='" + dom + "']").data("color")) {
      case "white":
        ref = ["shaded", 0], color = ref[0], score = ref[1];
        break;
      case "shaded":
        ref1 = ["red", 10], color = ref1[0], score = ref1[1];
        break;
      case "red":
        ref2 = ["yellow", 25], color = ref2[0], score = ref2[1];
        break;
      case "yellow":
        ref3 = ["lightGreen", 40], color = ref3[0], score = ref3[1];
        break;
      case "lightGreen":
        ref4 = ["green", 50], color = ref4[0], score = ref4[1];
        break;
      case "green":
        ref5 = ["white", 0], color = ref5[0], score = ref5[1];
    }
    $(".signifiant[data-item='" + dom + "']").attr("data-color", color);
    $(".signifiant[data-item='" + dom + "']").data("color", color);
    if ($(".selected").length === 1) {
      id = $(".selected").data("id");
      $cell = $("tr[data-id='" + id + "']").find("td[data-dom='" + dom + "']");
      row = $cell.data("row");
      col = $cell.data("col");
      id = $cell.data("id");
      $cell.attr("data-color", color);
      $cell.data("color", color);
      if (!isNaN(row * col)) {
        DATA[id][col] = score;
        return $cell.html(score);
      }
    } else {
      $cells = $("#scoreTable").find("td[data-dom='" + dom + "']");

      /*
      if color isnt "white"
        $( "#scoreTable" ).find( "th[data-dom='#{dom}']" ).show()
      else
        $( "#scoreTable" ).find( "th[data-dom='#{dom}']" ).hide()
       */
      return $cells.each(function() {
        row = $(this).data("row");
        col = $(this).data("col");
        id = $(this).data("id");
        $(this).attr("data-color", color);
        $(this).data("color", color);
        if (!isNaN(row * col)) {
          DATA[id][col] = score;
          return $(this).html(score);
        }
      });
    }
  };

  copyToClipboard = function(el) {
    var body, e, range, sel;
    body = document.body;
    if (document.createRange && window.getSelection) {
      range = document.createRange();
      sel = window.getSelection();
      sel.removeAllRanges();
      try {
        range.selectNodeContents(el);
        sel.addRange(range);
      } catch (_error) {
        e = _error;
        range.selectNode(el);
        sel.addRange(range);
      }
    } else if (body.createTextRange) {
      range = body.createTextRange();
      range.moveToElementText(el);
      range.select();
    }
    return document.execCommand("Copy");
  };

  go_csv_data = function(data) {
    var $select, hide_show_col, i, id, k, l, len, len1, o, ref, ref1, ref2, temp;
    hide_show_col = function() {
      $("#mainselect option[value=Menu]").prop("selected", true);
      return $(".signifiant").each(function() {
        var $cells, color, dom;
        dom = $(this).data("item");
        if ($(this).data("color") === "white") {
          return $("#scoreTable").find("th[data-dom='" + dom + "'], td[data-dom='" + dom + "']").hide();
        } else {
          color = $(this).data("color");
          $cells = $("#scoreTable").find("th[data-dom='" + dom + "'], td[data-dom='" + dom + "']");
          $cells.not("th").data("color", color);
          $cells.not("th").attr("data-color", color);
          return $cells.show();
        }
      });
    };
    temp = $.csv.toArrays(data);
    id = 1;
    ref = [[], []], DATA = ref[0], CLASSES = ref[1];
    for (k = 0, len = temp.length; k < len; k++) {
      i = temp[k];
      if (ref1 = i[0], indexOf.call(CLASSES, ref1) < 0) {
        CLASSES.push(i[0]);
      }
      DATA.push([id++].concat(i).concat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
    }
    DATA.unshift(HEADERS);
    DATA_TEMP = DATA;
    bigTable(DATA_TEMP);
    $select = $("<select id='mainselect'></select>");
    ref2 = ["Menu", "Importer", "Sauver Table", "Sauver Catégories", "Copier", "Tous"].concat(CLASSES);
    for (l = 0, len1 = ref2.length; l < len1; l++) {
      o = ref2[l];
      $select.append("<option value='" + o + "'>" + o + "</option>");
    }
    $("#mainselect").remove();
    $("#menu-item").prepend($select);
    $("#mainselect option[value=Menu]").prop("selected", true);
    return $("#mainselect").change(function() {
      var CLASSE, len2, m, option, save;
      save = function(type) {
        var dataStr, dlAnchorElem, options, stringValue;
        dataStr = "data:text/" + type + ";charset=utf-8,";
        stringValue = prompt("Nom du fichier ?", stringValue);
        switch (type) {
          case "json":
            dataStr += encodeURIComponent(JSON.stringify(CATEGORIES));
            break;
          case "csv":
            options = {
              "separator": "\t"
            };
            dataStr += encodeURIComponent($.csv.fromArrays(DATA_TEMP, options));
        }
        dlAnchorElem = document.getElementById('save');
        dlAnchorElem.setAttribute("href", dataStr);
        dlAnchorElem.setAttribute("download", stringValue + "." + type);
        return dlAnchorElem.click();
      };
      option = $("#mainselect").val();
      switch (option) {
        case "Importer":
          return $("#upload").show();
        case "Sauver Table":
          return save("csv");
        case "Sauver Catégories":
          return save("json");
        case "Copier":
          return $("#copy").click();
        case "Tous":
          return bigTable(DATA_TEMP = DATA);
        default:
          if (option !== "menu") {
            CLASSE = option;
            DATA_TEMP = [HEADERS];
            for (m = 0, len2 = DATA.length; m < len2; m++) {
              o = DATA[m];
              if (o[1] === CLASSE) {
                DATA_TEMP.push(o);
              }
            }
            return bigTable(DATA_TEMP);
          }
      }
    });
  };

  Descripteur = (function() {
    function Descripteur(item, parent_id1, nom1) {
      var html;
      this.item = item;
      this.parent_id = parent_id1;
      this.nom = nom1;
      this.id = ID++;
      html = "<li id='" + this.id + "' class='descripteur'data-item='" + this.item + "' data-color='white' data-parent_id='" + this.parent_id + "'>\n    <div class='head'>\n        " + this.nom + "\n        <button class='editSignifiant admin'>Éditer</button>\n    </div>\n</li>";
      $("#" + this.parent_id + " .descripteurs ul").append(html);
    }

    return Descripteur;

  })();

  Signifiant = (function() {
    function Signifiant(item, parent_id1, nom1) {
      var html;
      this.item = item;
      this.parent_id = parent_id1;
      this.nom = nom1;
      this.id = ID++;
      html = "<div id='" + this.id + "' class='signifiant' data-item='" + this.item + "' data-color='white' data-parent_id='" + this.parent_id + "' data-nom='" + this.nom + "'>\n    <div class='head'>\n        <div class='toggleDescripteurs hide' data-id='" + this.id + "'></div>" + this.nom + "\n        <button class='addDescripteur admin' data-parent_id='" + this.id + "'>+Descripteur</button>       \n    </div>\n    <div class='descripteurs' title='" + this.nom + "'>\n        <ul></ul>\n    </div>\n</div>";
      $("#" + this.parent_id).find(".signifiants").append(html);
    }

    return Signifiant;

  })();

  Categorie = (function() {
    function Categorie(nom1, desc1, iconUrl1) {
      this.nom = nom1;
      this.desc = desc1;
      this.iconUrl = iconUrl1;
      this.id = ID++;
      this.tab_html = "<div class='category__tab show' data-id='" + this.id + "'>\n    <div class='head'>\n        <img class='tabdomain' src='" + this.iconUrl + "'>\n    </div>\n</div>";
      this.eval_html = "<div id='" + this.id + "' class='category' data-nom='" + this.nom + "' data-desc='" + this.desc + "' data-icon='" + this.iconUrl + "'>\n    <div class='head'>   \n        <span class='category__name'>\n          <h1>\n              <img class='category__icon' src='" + this.iconUrl + "' data-nom='" + this.nom + "'>" + this.nom + "\n          </h1>\n          <h2>" + this.desc + "</h2>\n        </span>\n    </div>\n    <button class='addSignifiant admin' data-parent_id='" + this.id + "'>+Signifiant</button>\n    <div class='signifiants'></div>\n</div>";
      $("#tabs").append(this.tab_html);
      $("#categories_area").append(this.eval_html);
    }

    return Categorie;

  })();

  $(function() {
    var d1, d2, dnd;
    $("#upload").hide();
    $("#upload .close").on("click", function() {
      return $("#upload").hide();
    });
    window.onbeforeunload = function() {
      return "";
    };
    d1 = $.Deferred();
    d2 = $.Deferred();
    $.ajax({
      type: "GET",
      url: "eleves.csv",
      dataType: "text",
      success: function(data) {
        go_csv_data(data);
        return d1.resolve("Éleves finished !");
      }
    });
    $.getJSON("S4C_cat.json", function(data) {
      var cat, descripteur, descripteurs, i, j, k, len, nom, ref, s, signifiant;
      CATEGORIES = data;
      for (nom in CATEGORIES) {
        cat = new Categorie(nom, data[nom].desc, data[nom].iconUrl);
        i = 1;
        ref = data[nom].signifiants;
        for (signifiant in ref) {
          descripteurs = ref[signifiant];
          s = new Signifiant(nom + "." + (i++), cat.id, signifiant);
          j = 1;
          for (k = 0, len = descripteurs.length; k < len; k++) {
            descripteur = descripteurs[k];
            new Descripteur(s.item + "." + (j++), s.id, descripteur);
          }
        }
      }
      $("#edit").prop("checked", false);
      $(".admin").hide();
      return $(".toggleDescripteurs").click();
    });
    d2.resolve("S4C finished !");
    $.when(d1, d2).done(function(v1, v2) {
      console.log(v1);
      console.log(v2);
      return $(".signifiant").each(function() {
        var dom;
        dom = $(this).data("item");
        if ($(this).data("color" === "white")) {
          return $("#scoreTable").find("th[data-dom='" + dom + "'], td[data-dom='" + dom + "']").hide();
        } else {
          return $("#scoreTable").find("th[data-dom='" + dom + "'], td[data-dom='" + dom + "']").show();
        }
      });
    });
    dnd = new DnDFileController('#upload', function(files) {
      var f, reader;
      f = files[0];
      reader = new FileReader;
      reader.onloadend = function(e) {
        return go_csv_data(this.result);
      };
      reader.readAsText(f);
    });
    $("body").on("click", "input[data-row='0']", function() {
      var checkBoxes;
      checkBoxes = $("input[type='checkbox']").not($(this));
      if ($(this).prop("checked")) {
        return checkBoxes.prop("checked", true).closest("tr").addClass("export");
      } else {
        return checkBoxes.prop("checked", false).closest("tr").removeClass("export");
      }
    });
    $("body").on("click", "input[type='checkbox']", function() {
      var text;
      $(this).closest("tr").toggleClass("export");
      text = "";
      $(".export").each(function() {
        $(this).find("td").each(function() {
          text += $(this).text();
          return text += ",";
        });
        return text += "\n";
      });
      $("#bar").text(text);
      return new Clipboard("#copy");
    });
    $("body").on("click", "button.eleve_id", function() {
      var do_it, dom, doms, id, k, l, len, len1, results;
      id = $(this).data("id");
      do_it = function() {
        return $("td[data-id='" + id + "']").each(function() {
          var col, color, dom, ref, ref1, ref2, ref3, ref4, ref5, score, val;
          col = $(this).data("col");
          dom = $(this).data("dom");
          val = DATA[id][col];
          switch (val) {
            case 0:
              if ($(this).data("color") === "shaded") {
                ref = ["shaded", 0], color = ref[0], score = ref[1];
              } else {
                ref1 = ["white", 0], color = ref1[0], score = ref1[1];
              }
              break;
            case 10:
              ref2 = ["red", 10], color = ref2[0], score = ref2[1];
              break;
            case 25:
              ref3 = ["yellow", 25], color = ref3[0], score = ref3[1];
              break;
            case 40:
              ref4 = ["lightGreen", 40], color = ref4[0], score = ref4[1];
              break;
            case 50:
              ref5 = ["green", 50], color = ref5[0], score = ref5[1];
          }
          $(".signifiant[data-item='" + dom + "']").attr("data-color", color);
          return $(".signifiant[data-item='" + dom + "']").data("color", color);
        });
      };
      if ($(".selected").length === 0) {
        if ($(".signifiant[data-color='shaded']").length === 0) {
          return alert("Selectionnez d'abord des signifiants !");
        } else {
          SELECTED_DOMS = [];
          doms = [];
          $(".signifiant[data-color='white']").each(function() {
            $(this).hide();
            return doms.push($(this).data("item"));
          });
          for (k = 0, len = doms.length; k < len; k++) {
            dom = doms[k];
            $("th[data-dom='" + dom + "'], td[data-dom='" + dom + "']").hide();
          }
          $(".signifiant[data-color='shaded']").each(function() {
            return SELECTED_DOMS.push($(this).data("item"));
          });
          $(".category").each(function() {
            if ($(this).find(".signifiant:visible").length === 0) {
              return $(this).hide();
            }
          });
          $("tr[data-id='" + id + "']").addClass("selected");
          return do_it();
        }
      } else {
        if ($(".selected").is($(this).closest("tr"))) {
          $(".selected").removeClass("selected");
          $(".category, th, td, #categories_area, .signifiant").show();
          results = [];
          for (l = 0, len1 = SELECTED_DOMS.length; l < len1; l++) {
            dom = SELECTED_DOMS[l];
            $(".signifiant[data-item='" + dom + "']").attr("data-color", "shaded");
            results.push($(".signifiant[data-item='" + dom + "']").data("color", "shaded"));
          }
          return results;
        } else {
          $(".selected").removeClass("selected");
          $("tr[data-id='" + id + "']").addClass("selected");
          return do_it();
        }
      }
    });
    $("body").on("click", ".category__tab", function(event) {
      var categoryId;
      categoryId = $(this).data("id");
      $(this).toggleClass("show hide");
      if ($(this).hasClass("show")) {
        $("#" + categoryId).show();
        return $(".selected").removeClass("selected");
      } else {
        return $("#" + categoryId).hide();
      }
    });
    $("body").on("click", ".signifiant", function() {
      return toggleEval($(this).data("item"));
    });
    $("body").on("click", ".addCategory", function() {
      var desc, iconUrl, nom;
      nom = prompt("Nom de la catégorie ?", "test");
      desc = prompt("Description de la catégorie ?", "desc");
      iconUrl = prompt("url de l'image de la catégorie ?", "img/D2.svg");
      return new Categorie(nom, desc, iconUrl);
    });
    $("body").on("click", ".addSignifiant", function() {
      var nom, parent_id;
      parent_id = $(this).data("parent_id");
      nom = prompt("Nom du signifiant ?", "signifiant");
      return new Signifiant(parent_id, nom);
    });
    $("body").on("click", ".addDescripteur", function() {
      var nom, parent_id;
      parent_id = $(this).data("parent_id");
      nom = prompt("Nom du descripteur ?", "descripteur");
      return new Descripteur(parent_id, nom);
    });
    $("body").on("click", ".toggleDescripteurs", function(event) {
      var id;
      event.stopPropagation();
      id = $(this).data("id");
      $(this).toggleClass("hide show");
      return $("#" + id + " .descripteurs").toggle();
    });
    $("body").on("click", "input#edit[type='checkbox']", function() {
      if ($(this).prop("checked")) {
        return $(".admin").show();
      } else {
        return $(".admin").hide();
      }
    });
    return $("#categories_area").draggable();
  });

}).call(this);
