// Generated by CoffeeScript 1.9.3
(function() {
  var CLASSES, DATA, DATA_TEMP, DnDFileController, EVALS, HEADERS, ID, bigTable, copyToClipboard, go_csv_data, toggleEval,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ID = 1;

  HEADERS = ['ID', 'Classe', 'Nom', 'PrÃ©nom', 'D1-1.1', 'D1-1.2', 'D1-1.3', 'D1-1.4', 'D1-1.5', 'D1-3.1', 'D1-3.2', 'D1-3.3', 'D1-3.4', 'D1-3.5', 'D1-3.6', 'D1-3.7', 'D2.1', 'D2.2', 'D2.3', 'D2.4', 'D3.1', 'D3.2', 'D3.3', 'D3.4', 'D4.1', 'D4.2', 'D5.1'];

  EVALS = void 0;

  CLASSES = [];

  DATA = [HEADERS];

  DATA_TEMP = [];

  DnDFileController = function(selector, onDropCallback) {
    var el_;
    el_ = document.querySelector(selector);
    this.dragenter = function(e) {
      e.stopPropagation();
      e.preventDefault();
      el_.classList.add('dropping');
      $("#upload").addClass("slim");
    };
    this.dragover = function(e) {
      e.stopPropagation();
      e.preventDefault();
    };
    this.dragleave = function(e) {
      e.stopPropagation();
      e.preventDefault();
      $("#upload").removeClass("slim");
    };
    this.drop = function(e) {
      $("#upload").removeClass("slim");
      $("#upload").hide();
      e.stopPropagation();
      e.preventDefault();
      el_.classList.remove('dropping');
      onDropCallback(e.dataTransfer.files, e);
    };
    el_.addEventListener('dragenter', this.dragenter, false);
    el_.addEventListener('dragover', this.dragover, false);
    el_.addEventListener('dragleave', this.dragleave, false);
    el_.addEventListener('drop', this.drop, false);
  };

  bigTable = function(data) {
    var arrayToTable, color, defaults, head, i, j, options, row, rows, table, tfoot, thead, val;
    arrayToTable = function(data, options) {};
    'use strict';
    table = $('<table id="tableau"/>');
    rows = [];
    defaults = {
      th: true,
      thead: false,
      tfoot: false,
      attrs: {}
    };
    options = $.extend(defaults, options);
    table.attr(options.attrs);
    i = 0;
    while (i < data.length) {
      row = $("<tr data-id='" + data[i][0] + "'/>");
      j = 0;
      while (j < data[i].length) {
        if (i === 0 && options.th) {
          head = data[i][j];
          if (j === 0) {
            head = "<input type='checkbox' data-row='" + i + "'>" + head;
          }
          if (j > 3) {
            if (j < 16) {
              head = "<img class='thdomain' src='img/domaine" + data[i][j].slice(1, 4) + ".svg' data-domain='D1-1'><br>" + data[i][j];
            } else {
              head = "<img  class='thdomain' src='img/domaine" + data[i][j][1] + ".svg' data-domain='D1-1'><br>" + data[i][j];
            }
            row.append($("<th data-row='" + i + "' data-col='" + j + "' data-id='" + data[i][j] + "' data-dom='" + data[0][j] + "'/th>").html(head));
          } else {
            row.append($("<th data-row='" + i + "' data-col='" + j + "' data-id='" + data[i][j] + "' data-dom='" + data[0][j] + "'></th>").html(head));
          }
        } else {
          if (j === 0) {
            val = "<input type='checkbox' data-id='" + data[i][j] + "''><button class='eleve_id' data-id='" + data[i][j] + "''>" + data[i][j] + "</button>";
          } else {
            val = "" + data[i][j];
            color = {
              0: "white",
              10: "red",
              25: "yellow",
              40: "lightGreen",
              50: "green"
            }[val];
          }
          if (color === void 0) {
            color = "white";
          }
          row.append($("<td data-color='" + color + "' data-row='" + i + "' data-col='" + j + "' data-id='" + data[i][0] + "' data-dom='" + data[0][j] + "'></td>").html(val));
        }
        j = j + 1;
      }
      rows.push(row);
      i = i + 1;
    }
    if (options.thead) {
      thead = rows.shift();
      thead = $('<thead />').append(thead);
      table.append(thead);
    }
    if (options.tfoot) {
      tfoot = rows.pop();
    }
    i = 0;
    while (i < rows.length) {
      table.append(rows[i]);
      i = i + 1;
    }
    if (options.tfoot) {
      tfoot = $('<tfoot />').append(tfoot);
      table.append(tfoot);
    }
    return table;
    return table = arrayToTable(data, {
      thead: true,
      attrs: {
        "class": 'table'
      }
    });
  };

  toggleEval = function(dom) {
    var $cells, color, ref, ref1, ref2, ref3, ref4, ref5, score;
    if ($(".selected").length === 1) {
      $cells = $(".selected").find("td:visible[data-dom='" + dom + "']");
    } else {
      $cells = $("#scoreTable").find("td:visible[data-dom='" + dom + "']");
    }
    switch ($(".significants[data-dom='" + dom + "']").data("color")) {
      case "white":
        ref = ["shaded", 0], color = ref[0], score = ref[1];
        break;
      case "shaded":
        ref1 = ["red", 10], color = ref1[0], score = ref1[1];
        break;
      case "red":
        ref2 = ["yellow", 25], color = ref2[0], score = ref2[1];
        break;
      case "yellow":
        ref3 = ["lightGreen", 40], color = ref3[0], score = ref3[1];
        break;
      case "lightGreen":
        ref4 = ["green", 50], color = ref4[0], score = ref4[1];
        break;
      case "green":
        ref5 = ["white", 0], color = ref5[0], score = ref5[1];
    }
    $(".significants[data-dom='" + dom + "']").attr("data-color", color);
    $(".significants[data-dom='" + dom + "']").data("color", color);
    return $cells.each(function() {
      var col, id, row;
      row = $(this).data("row");
      col = $(this).data("col");
      id = $(this).data("id");
      $(this).attr("data-color", color);
      $(this).data("color", color);
      if (!isNaN(row * col)) {
        DATA[id][col] = score;
        return $(this).html(score);
      }
    });
  };

  copyToClipboard = function(el) {
    var body, e, range, sel;
    body = document.body;
    if (document.createRange && window.getSelection) {
      range = document.createRange();
      sel = window.getSelection();
      sel.removeAllRanges();
      try {
        range.selectNodeContents(el);
        sel.addRange(range);
      } catch (_error) {
        e = _error;
        range.selectNode(el);
        sel.addRange(range);
      }
    } else if (body.createTextRange) {
      range = body.createTextRange();
      range.moveToElementText(el);
      range.select();
    }
    return document.execCommand("Copy");
  };

  go_csv_data = function(data) {
    var $select, i, id, l, len, len1, m, o, ref, ref1, table, temp;
    temp = $.csv.toArrays(data);
    id = 1;
    DATA = [];
    CLASSES = [];
    for (l = 0, len = temp.length; l < len; l++) {
      i = temp[l];
      if (ref = i[0], indexOf.call(CLASSES, ref) < 0) {
        CLASSES.push(i[0]);
      }
      DATA.push([id++].concat(i).concat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
    }
    DATA.unshift(HEADERS);
    table = bigTable(DATA);
    $('#scoreTable').empty().append(table);
    $select = $("<select id='mainselect'></select>");
    ref1 = ["Menu", "Importer", "Sauver", "Copier", "Tous"].concat(CLASSES);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      o = ref1[m];
      $select.append("<option value='" + o + "'>" + o + "</option>");
    }
    $("#mainselect").remove();
    $("#mainmenu").prepend($select);
    $("#mainselect option[value=Menu]").prop("selected", true);
    return $("#mainselect").change(function() {
      var CLASSE, dataStr, dlAnchorElem, len2, option, p, stringValue;
      option = $("#mainselect").val();
      console.log(option);
      switch (option) {
        case "Importer":
          $("#upload").show();
          break;
        case "Sauver":
          stringValue = prompt("Nom du fichier ?", stringValue);
          dataStr = "data:text/csv;charset=utf-8," + encodeURIComponent($.csv.fromArrays(DATA_TEMP));
          dlAnchorElem = document.getElementById('save');
          dlAnchorElem.setAttribute("href", dataStr);
          dlAnchorElem.setAttribute("download", stringValue + ".csv");
          dlAnchorElem.click();
          break;
        case "Copier":
          $("#copy").click();
          break;
        case "Tous":
          DATA_TEMP = DATA;
          table = bigTable(DATA_TEMP);
          $('#scoreTable').empty().append(table);
          break;
        default:
          if (option !== "menu") {
            console.log(option);
            CLASSE = option;
            DATA_TEMP = [HEADERS];
            for (p = 0, len2 = DATA.length; p < len2; p++) {
              o = DATA[p];
              if (o[1] === CLASSE) {
                DATA_TEMP.push(o);
              }
            }
            table = bigTable(DATA_TEMP);
            $('#scoreTable').empty().append(table);
          }
      }
      return $('#mainselect option[value=Menu]').prop("selected", true);
    });
  };

  $(function() {
    var dnd;
    $("#upload").hide();
    $("#upload .close").on("click", function() {
      return $("#upload").hide();
    });
    window.onbeforeunload = function() {
      return "";
    };
    $.ajax({
      type: "GET",
      url: "eleves.csv",
      dataType: "text",
      success: function(data) {
        return go_csv_data(data);
      }
    });
    dnd = new DnDFileController('#upload', function(files) {
      var f, reader;
      f = files[0];
      reader = new FileReader;
      reader.onloadend = function(e) {
        return go_csv_data(this.result);
      };
      reader.readAsText(f);
    });
    $.getJSON("S4C.json", function(data) {
      var $html, $s, evals, i, id, k, l, len, n, ref, s;
      EVALS = data;
      evals = Object.keys(EVALS);
      for (k in EVALS) {
        $html = $("<div id=\"" + k + "\" class=\"domain\">\n  <div class=\"nom\">" + k + " : " + EVALS[k]['subtitle'] + "</div>\n</div>    ");
        n = 0;
        for (s in EVALS[k].significants) {
          id = ID++;
          n++;
          $s = $("<div class='significants' data-color='white' data-dom='" + k + "." + n + "'>" + s + "<img class='more' src='css/icons/more.png' data-id='" + id + "'><div class='info' id='" + id + "' title='" + s + "'><ul></ul></div></div>");
          ref = EVALS[k].significants[s];
          for (l = 0, len = ref.length; l < len; l++) {
            i = ref[l];
            $s.find(".info ul").append("<li class='item'>" + i + "</li>");
          }
          $html.append($s);
        }
        $("#significants_area").append($html);
      }
      $("#significants_area").draggable();
      $(".info").dialog({
        autoOpen: false,
        width: "auto"
      });
      return $("body").on("click", ".more", function(event) {
        event.stopPropagation();
        id = $(this).data("id");
        return $("#" + id).dialog("open");
      });
    });
    $("body").on("click", "input[data-row='0']", function() {
      var checkBoxes;
      checkBoxes = $("input[type='checkbox']").not($(this));
      if ($(this).prop("checked")) {
        checkBoxes.prop("checked", true);
        return checkBoxes.closest("tr").addClass("export");
      } else {
        checkBoxes.prop("checked", false);
        return checkBoxes.closest("tr").removeClass("export");
      }
    });
    $("body").on("click", "input[type='checkbox']", function() {
      var text;
      $(this).closest("tr").toggleClass("export");
      text = "";
      $(".export").each(function() {
        $(this).find("td").each(function() {
          text += $(this).text();
          return text += ",";
        });
        return text += "\n";
      });
      $("#bar").text(text);
      return new Clipboard("#copy");
    });
    $("body").on("click", "button.eleve_id", function() {
      var id;
      if ($(".selected").length === 1) {
        return $(".selected").removeClass("selected");
      } else {
        id = $(this).data("id");
        $("tr[data-id='" + id + "']").addClass("selected");
        return $("td[data-id='" + id + "']").each(function() {
          var col, color, dom, ref, ref1, ref2, ref3, ref4, ref5, score, val;
          col = $(this).data("col");
          dom = $(this).data("dom");
          val = DATA[id][col];
          switch (val) {
            case 0:
              if ($(this).data("color") === "shaded") {
                ref = ["shaded", 0], color = ref[0], score = ref[1];
              } else {
                ref1 = ["white", 0], color = ref1[0], score = ref1[1];
              }
              break;
            case 10:
              ref2 = ["red", 10], color = ref2[0], score = ref2[1];
              break;
            case 25:
              ref3 = ["yellow", 25], color = ref3[0], score = ref3[1];
              break;
            case 40:
              ref4 = ["lightGreen", 40], color = ref4[0], score = ref4[1];
              break;
            case 50:
              ref5 = ["green", 50], color = ref5[0], score = ref5[1];
          }
          $(".significants[data-dom='" + dom + "']").attr("data-color", color);
          return $(".significants[data-dom='" + dom + "']").data("color", color);
        });
      }
    });
    $(".tabdomain").addClass("show");
    $(".tabtoggler[data-domain='all']").hide();
    $(".tabtoggler[data-domain='none']").on("click", function() {
      $("#significants_area, .tabdomain").hide();
      $("tr, .tabtoggler[data-domain='all']").show();
      return $(this).hide();
    });
    $(".tabtoggler[data-domain='all']").on("click", function() {
      $(".tabdomain").show();
      $("#significants_area").show();
      $(".tabtoggler[data-domain='none']").show();
      return $(this).hide();
    });
    $(".tabdomain").on("click", function(event) {
      var dom;
      dom = $(this).data("domain");
      $(this).toggleClass("show hide");
      $("#" + dom).toggle();
      if ($(this).hasClass("hide")) {
        return $("th[data-dom^='" + dom + "'],td[data-dom^='" + dom + "']").hide();
      } else {
        return $("th[data-dom^='" + dom + "'],td[data-dom^='" + dom + "']").show();
      }
    });
    return $("body").on("click", ".significants", function() {
      return toggleEval($(this).data("dom"));
    });
  });

}).call(this);
